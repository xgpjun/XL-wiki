"use strict";(self.webpackChunkxl_wiki=self.webpackChunkxl_wiki||[]).push([[225],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>y});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),c=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(u.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,y=d["".concat(u,".").concat(m)]||d[m]||p[m]||l;return t?a.createElement(y,i(i({ref:n},s),{},{components:t})):a.createElement(y,i({ref:n},s))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4302:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const l={sidebar_position:10},i="\u5f00\u53d1\u4fe1\u606f",o={unversionedId:"\u5f00\u53d1\u4fe1\u606f",id:"\u5f00\u53d1\u4fe1\u606f",title:"\u5f00\u53d1\u4fe1\u606f",description:"\u4e86\u89e3\u6b64\u5185\u5bb9\u4fe1\u606f\u4f60\u9700\u8981\u5b66\u4f1ajava\u6216kotlin",source:"@site/docs/\u5f00\u53d1\u4fe1\u606f.md",sourceDirName:".",slug:"/\u5f00\u53d1\u4fe1\u606f",permalink:"/XL-wiki/en/\u5f00\u53d1\u4fe1\u606f",draft:!1,editUrl:"https://github.com/xgpjun/XL-wiki/blob/main/docs/\u5f00\u53d1\u4fe1\u606f.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"\u5982\u4f55\u5b9e\u73b0\u65b0\u7248\u672c\u9609\u5272\u7684\u5185\u5bb9",permalink:"/XL-wiki/en/\u5982\u4f55\u5b9e\u73b0\u65b0\u7248\u672c\u9609\u5272\u7684\u5185\u5bb9"}},u={},c=[{value:"\u4e8b\u4ef6",id:"\u4e8b\u4ef6",level:2},{value:"\u81ea\u5b9a\u4e49\u62bd\u5956\u52a8\u753b",id:"\u81ea\u5b9a\u4e49\u62bd\u5956\u52a8\u753b",level:2},{value:"\u81ea\u5b9a\u4e49\u62bd\u5956\u8ba1\u7b97\u5668",id:"\u81ea\u5b9a\u4e49\u62bd\u5956\u8ba1\u7b97\u5668",level:2},{value:"\u81ea\u5b9a\u4e49\u7c92\u5b50\u7279\u6548",id:"\u81ea\u5b9a\u4e49\u7c92\u5b50\u7279\u6548",level:2}],s={toc:c},d="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u5f00\u53d1\u4fe1\u606f"},"\u5f00\u53d1\u4fe1\u606f"),(0,r.kt)("p",null,"\u4e86\u89e3\u6b64\u5185\u5bb9\u4fe1\u606f\u4f60\u9700\u8981\u5b66\u4f1ajava\u6216kotlin"),(0,r.kt)("h2",{id:"\u4e8b\u4ef6"},"\u4e8b\u4ef6"),(0,r.kt)("p",null,"XLReloadEvent  \u5728\u63d2\u4ef6\u91cd\u8f7d\u65f6\u8c03\u7528\uff0c\u4e0d\u53ef\u53d6\u6d88"),(0,r.kt)("p",null,"DrawEvent \u5728\u73a9\u5bb6\u62bd\u5956\u65f6\u8c03\u7528\uff0c\u4e0d\u53ef\u53d6\u6d88\u3002"),(0,r.kt)("h2",{id:"\u81ea\u5b9a\u4e49\u62bd\u5956\u52a8\u753b"},"\u81ea\u5b9a\u4e49\u62bd\u5956\u52a8\u753b"),(0,r.kt)("p",null,"\u5bf9\u4e8e\u5355\u62bd\u548c\u5341\u8fde\u62bd\u7684\u5b9e\u73b0\u662f\u7c7b\u4f3c\u7684\uff0c\u8fd9\u91cc\u53ea\u4ee5\u5355\u62bd\u4e3a\u4f8b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"abstract class SingleAnim:InventoryHolder {\n    abstract val name:String //\u52a8\u753b\u5185\u90e8\u540d\n    abstract val i18nName:String //\u6c49\u5316\u540d\n    var award:Award? = null //\u5956\u54c1\uff0cdraw\u65b9\u6cd5\u8c03\u7528\u524d\u83b7\u5f97\n    var mustBeCrate:Boolean = false //\u662f\u5426\u5fc5\u987b\u4e3a\u62bd\u5956\u7bb1\u52a8\u753b\n    abstract fun draw(player: Player,lottery: Lottery,crateLocation:Location?)  //\u62bd\u5956\u65b9\u6cd5\u5165\u53e3\n    fun register() { //\u52a8\u753b\u6ce8\u518c\n        AnimManager.singleAnim[name] = this.javaClass\n    }\n    open fun finish(){}  //\u5f53\u5173\u95edgui\u65f6\u4f1a\u8c03\u7528\u6b64\u5757\u5185\u5bb9\n}\n")),(0,r.kt)("p",null,"\u4ee5\u9ed8\u8ba4\u62bd\u5956\u4e3a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'class DefaultAnim:SingleAnim() {\n    private val inv = Bukkit.createInventory(this,3*9,Message.DefaultSingleAnimTitle.get().color())\n    override val name: String\n        get() = "Default"\n    override val i18nName: String\n        get() = Message.DefaultSingleAnimName.get().color()\n\n    override fun getInventory(): Inventory {\n        return inv\n    }\n    var animTask: Task? = null\n\n    override fun draw(player: Player, lottery: Lottery, crateLocation: Location?) {\n        crateLocation?.block?.let {\n            //1.16+\n            try {\n                if(NMSManager.versionToInt>=16&&it.state is Lidded){\n                    (it.state as Lidded).open()\n                    SchedulerManager.getScheduler(crateLocation).runTaskLater(100L){\n                        (it.state as Lidded).close()\n                        val firework: Firework = crateLocation.world.spawn(crateLocation, Firework::class.java)\n                        val fireworkMeta = firework.fireworkMeta\n                        val builder = FireworkEffect.builder()\n                        builder.withColor(Color.AQUA)\n                        builder.with(FireworkEffect.Type.BALL)\n                        fireworkMeta.addEffect(builder.build())\n                        fireworkMeta.power = 1 // \u8bbe\u7f6e\u70df\u82b1\u5f39\u7684\u5f3a\u5ea6\n                        firework.fireworkMeta = fireworkMeta\n                    }\n                }\n            }catch (_:Exception){\n            }\n\n        }\n        SchedulerManager.getScheduler().runTaskAsynchronously{\n            val award = award\n            if (award==null){\n                Message.AwardNull.get().send(player)\n                return@runTaskAsynchronously\n            }\n            loadInv()\n            val showItemList = ArrayList<ItemStack>()\n\n            for (i in 0..40) {\n                val itemStack = lottery.getRandomAward()!!.toDisplayItem()\n                showItemList.add(itemStack)\n            }\n            //get award\n            showItemList[20] = award.toDisplayItem()\n\n            SchedulerManager.getScheduler().runTask{\n                player.openInventory(inv)\n            }\n\n            var j = 0\n            var stop = false\n            animTask = SchedulerManager.getScheduler().runTaskTimerAsynchronously(0L,5L){\n                for (i in 9..17) {\n                    val myItem = MyItemBuilder(showItemList[i - 9 + j])\n                    if (i == 13) inventory.setItem(i, myItem.addEnchant().getItem()) else inventory.setItem(\n                        i,\n                        myItem.getItem()\n                    )\n                }\n                j++\n                if (j >= showItemList.size - 9) {\n                    j = 0\n                }\n                if (j == 17) { // \u4e2d\u5956\u7269\u54c1\u7684\u4f4d\u7f6e\u662f\u7b2c 17   21-4\n                    stop = true\n                }\n                val pitch = 2.0.pow(j / 18.0).toFloat()\n                player.playSound(player.location, Sounds.PLING.get(), 1.0f, pitch)\n                if (stop) {\n                    animTask?.cancel()\n                    player.playSound(player.location, Sounds.LEVEL_UP.get(), 1.0f, 1.0f)\n                }\n            }\n        }\n    }\n\n    override fun finish() {\n        animTask?.cancel()\n    }\n\n    private fun loadInv(){\n        var i = 0\n        while (i < 27) {\n            inv.setItem(i, PresetItem.BORDER_GLASS.getItem())\n            if (i == 8) i = 17\n            i++\n        }\n        inv.setItem(4, PresetItem.BORDER_GLASS2.getItem())\n        inv.setItem(22, PresetItem.BORDER_GLASS2.getItem())\n\n    }\n}\n')),(0,r.kt)("p",null,"\u5bf9\u4e8e\u65b9\u6cd5fun draw(player: Player, lottery: Lottery, crateLocation: Location?)"),(0,r.kt)("p",null,"\u4f20\u5165\u7684crateLocation\uff0c\u5982\u679c\u4e0d\u4e3anull\u5219\u8bf4\u660e\u73a9\u5bb6\u662f\u53f3\u952e\u62bd\u5956\u7bb1\u6765\u62bd\u5956\u7684\u3002 \u8fd9\u91cc\u662f\u4e3a\u4e86\u63d0\u4f9b\u672a\u6765\u53ef\u80fd\u7684 \u5982\u5730\u5f62\u64cd\u4f5c \u7c92\u5b50\u7279\u6548 \u7b49\u62bd\u5956\u52a8\u753b\u3002"),(0,r.kt)("p",null,"\u7136\u540e\u5728finish\u586b\u5165\u53d6\u6d88\u4efb\u52a1\uff0c\u5982\u679c\u73a9\u5bb6\u5728\u52a8\u753b\u7ed3\u675f\u524d\u63d0\u524d\u5173\u95ed\u4e86gui\u3002"),(0,r.kt)("p",null,"\u53e6\u5916\uff0c\u4f60\u9700\u8981\u6ce8\u610f\u7684\u662f\u3002 \u5982\u679c\u4f60\u7684\u62bd\u5956\u52a8\u753b\u6253\u5f00\u4e86gui\uff0c\u90a3\u4e48\u5c31\u4e0d\u8981\u624b\u52a8\u7ed9\u4e0eaward\u4e86\u3002 \u56e0\u4e3a\u5728gui\u5173\u95ed\u65f6\u4f1a\u7edf\u4e00\u53d1\u653e\u5956\u54c1\u3002"),(0,r.kt)("p",null,"\u6700\u540e\uff0c\u522b\u5fd8\u4e86DefaultAnim().register()"),(0,r.kt)("h2",{id:"\u81ea\u5b9a\u4e49\u62bd\u5956\u8ba1\u7b97\u5668"},"\u81ea\u5b9a\u4e49\u62bd\u5956\u8ba1\u7b97\u5668"),(0,r.kt)("p",null,"\u5982\u679c\u4f60\u60f3\u8981\u65e0\u653e\u56de\u7684\u4fdd\u5e95\u62bd\u5956\uff0c\u90a3\u4e48\u6765\u5c1d\u8bd5\u81ea\u5df1\u5199\u4e00\u4e2a\u5427\uff01"),(0,r.kt)("p",null,"\u90a3\u4e48\u7b2c\u4e00\u6b65 \u4f60\u8fd8\u662f\u9700\u8981\u7ee7\u627f\u62bd\u8c61\u7c7b cn.xgpjun.xgplottery2.lottery.calculator.Calculator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"abstract class Calculator {\n    abstract fun getAward(player: Player,lottery: Lottery):Award? //\u83b7\u5f97\u5956\u54c1\u7684\u65b9\u6cd5\uff0c \u4f60\u9700\u8981\u5b9e\u73b0\u5b83\n    fun register(name:String){ // \u6ce8\u518c\uff0c \u522b\u5fd8\u4e86\u6ce8\u518c\uff01\n        DrawManager.calculators[name] = this\n    }\n}\n")),(0,r.kt)("p",null,"\u597d\uff0c\u4ecd\u4ee5\u6211\u7684\u4fdd\u5e95\u4e3a\u4f8b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'class GuaranteedCalculator:Calculator() {\n    override fun getAward(player: Player, lottery: Lottery): Award? {\n        val playerData = DatabaseManager.getPlayerData(player.uniqueId)\n        val nonGuaranteedCount = playerData.customData.getOrDefault("nonGuaranteed${lottery.name}",0).int() + 1\n        playerData.addCount(lottery)\n        val guaranteedCount = lottery.getGuaranteedCount()\n        //\u5956\u6c60\u62e5\u6709\u4fdd\u5e95\u673a\u5236\n        if (guaranteedCount is Int && guaranteedCount>0 ){\n            //\u6ee1\u8db3\u4fdd\u5e95\u60c5\u51b5\n            if (nonGuaranteedCount>=guaranteedCount){\n                playerData.customData["nonGuaranteed${lottery.name}"] = 0\n                val guaranteedList = lottery.awards.values.filter { it.isGuaranteed() }\n                val totalWeight = guaranteedList.sumOf { it.weight }\n                val randomWeight = (1..totalWeight).random()\n                var cumulativeWeight = 0\n                for (award in guaranteedList){\n                    cumulativeWeight += award.weight\n                    if (randomWeight <= cumulativeWeight){\n                        return award\n                    }\n                }\n            }else{\n                playerData.customData["nonGuaranteed${lottery.name}"] = nonGuaranteedCount\n            }\n        }\n        //\u5176\u4ed6\u60c5\u51b5\u3001 \u63d0\u524d\u51fa\u4e86\n        val award = NormalCalculator.onlyGetAward(lottery)\n        if (award?.isGuaranteed() == true){\n            playerData.customData["nonGuaranteed${lottery.name}"] = 0\n        }\n        return award\n    }\n\n}\n')),(0,r.kt)("p",null,"\u4f60\u53ef\u4ee5\u8bfb\u53d6\u4e0e\u5b58\u653e\u4e00\u4e9b\u6570\u636e\u5728customData\u8282\u70b9\u5185\uff0c\u4f8b\u5982\u672c\u4f8b\u4e2d\u7684 \u201d\u8ddd\u79bb\u4e0a\u6b21\u672a\u4fdd\u5e95\u6570\u201c \u548c \u201d\u5956\u54c1\u662f\u5426\u4e3a\u4fdd\u5e95\u201c \u7b49\u6570\u636e\u3002"),(0,r.kt)("p",null,"\u5982\u679c\u4f60\u5e0c\u671b\u8fdb\u884c\u65e0\u653e\u56de\u7684\u62bd\u5956\uff0c\u90a3\u4e48\u4e00\u70b9\u601d\u8def\u662f\u5728\u6ee1\u8db3\u4fdd\u5e95\u60c5\u51b5\u65f6\uff0c\u5728filter { it.isGuaranteed() } \u91cc\u9762\u6dfb\u52a0\u4e00\u4e9b\u6761\u4ef6\uff0c \u6bd4\u5982\u5df2\u7ecf\u5b58\u653e\u5728\u4e86\u73a9\u5bb6\u7684customData\u4e2d\u7684\u67d0\u4e9b\u6570\u503c\u3002\u3002 \u5f53\u7136 \u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u65b9\u6cd5\u3002"),(0,r.kt)("h2",{id:"\u81ea\u5b9a\u4e49\u7c92\u5b50\u7279\u6548"},"\u81ea\u5b9a\u4e49\u7c92\u5b50\u7279\u6548"),(0,r.kt)("p",null,'\u8fd9\u91cc\u4f60\u9700\u8981\u7ee7\u627f\u62bd\u8c61\u7c7b "cn.xgpjun.xgplottery2.crate.particle.CrateParticleObject"'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"abstract class CrateParticleObject(val crate: Crate?) {\n    abstract fun show()\n    abstract fun clear()\n    fun register(name:String){ //\u6ce8\u518c\n        ParticleManager.particles[name] = this.javaClass\n    }\n}\n")),(0,r.kt)("p",null,"\u8fd9\u91cc\u5c31\u5f88\u7b80\u5355\u4e86\uff0c \u53ea\u6709\u663e\u793a\u548c\u9690\u85cf\u4e24\u4e2a\u65b9\u6cd5\u3002  \u4f60\u53ef\u4ee5\u5728\u91cc\u9762\u505a\u4f60\u7231\u505a\u7684\u4e8b\u60c5\u3002"),(0,r.kt)("p",null,"\u672c\u63d2\u4ef6\u4f7f\u7528\u4e86\u83ab\u8001\u7684particlelib"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"class DefaultParticle(crate: Crate?):CrateParticleObject(crate){\n    var task : Task? =null\n\n    override fun show(){\n        val c = Circle2(crate?.getLocation()!!.clone().add(0.5,0.0,0.5))\n        c.setPeriod(2L)\n        c.color = Color.AQUA\n        c.radius = 2.0.pow(0.5)/2\n        task = SchedulerManager.getScheduler().runTaskTimerAsynchronously(0L,4L){\n            for (i in 0..10) {\n                c.playNextPoint()\n            }\n        }\n    }\n    override fun clear(){\n        task?.cancel()\n    }\n}\n\nclass Circle2(location: Location): Circle(location){\n    private var currentAngle = 0.0\n    override fun playNextPoint() {\n        currentAngle += step\n        val radians = Math.toRadians(currentAngle)\n        val x = radius * cos(radians)\n        val z = radius * sin(radians)\n        val y = (currentAngle/angle)*2\n        spawnParticle(origin.clone().add(x, y, z))\n        spawnParticle(origin.clone().add(-x, y, -z))\n\n        // \u8fdb\u884c\u91cd\u7f6e\n        if (currentAngle > angle) {\n            currentAngle = 0.0\n        }\n    }\n}\n")))}p.isMDXComponent=!0}}]);